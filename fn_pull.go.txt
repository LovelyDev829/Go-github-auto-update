package main

import (
    "fmt"
    "os"

    "gopkg.in/src-d/go-git.v4"
    "gopkg.in/src-d/go-git.v4/plumbing/transport/http"
)

const (
	owner = "LovelyDev829"
	branch = "nik-hello-world"
	urlfmt = "https://github.com/%s/%s"
	directory = "../clone"
	accessToken = "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"
)


func pull_private_repo(owner string, directory string, accessToken string) {
	    // Open the existing repository
		repo, err := git.PlainOpen(directory)
		if err != nil {
			fmt.Println("Error opening repository:", err)
			os.Exit(1)
		}
	
		// Create a new pull options struct
		pullOptions := &git.PullOptions{
			RemoteName: "origin",
			Auth: &http.BasicAuth{
				Username: owner, // Can be anything except an empty string
				Password: accessToken,
			},
		}
	
		// Get the working directory for the repository
		worktree, err := repo.Worktree()
		if err != nil {
			fmt.Println("Error getting worktree:", err)
			os.Exit(1)
		}
	
		// Perform a pull to update the local repository
		err = worktree.Pull(pullOptions)
		if err != nil {
			if err == git.NoErrAlreadyUpToDate {
				fmt.Println("Repository is already up-to-date")
			} else {
				fmt.Println("Error pulling repository:", err)
			}
			os.Exit(1)
		}
	
		fmt.Println("Repository pulled successfully")
}

func main() {
    // Path to your local repository
	pull_private_repo(owner, directory, accessToken)


}
